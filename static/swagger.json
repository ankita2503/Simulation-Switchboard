{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Computation Simulation",
    "contact": {}
  },
  "host": "127.0.0.1:5000",
  "basePath": "/",
  "securityDefinitions": {},
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/computation": {
      "post": {
        "summary": "Endpoint which handles incoming computational requests by spawing a new docker container and storing the volume in storage location.",
        "tags": [
          "Computation Request"
        ],
        "operationId": "computation",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/computationrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers": {
      "get": {
        "summary": "endpoint to return the status of all running containers",
        "tags": [
          "Container Status"
        ],
        "operationId": "containers",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}": {
      "delete": {
        "summary": "Endpoint to stop and remove a container wuth given ID upon client request",
        "tags": [
          "Stop and Remove container on request"
        ],
        "operationId": "containersWithID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "description": "container_id of the container to be deleted",
            "required": true,
            "schema":
              {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "headers": {}
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "tags": [
          "Health Check"
        ],
        "operationId": "Health",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "headers": {}
          }
        }
      }
    }
  },
  "definitions": {
    "computationrequest": {
      "title": "computationrequest",
      "example": {
        "image": "ankita2503/compute-random-date:V0.1",
        "env_vars": {
          "env": "dev"
        },
        "input_data": {
          "resultFolder": "computationResult",
          "containerVolumePath": "/data"
        }
      },
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "env_vars": {
          "$ref": "#/definitions/EnvVars"
        },
        "input_data": {
          "$ref": "#/definitions/InputData"
        }
      },
      "required": [
        "image",
        "env_vars",
        "input_data"
      ]
    },
    "EnvVars": {
      "title": "EnvVars",
      "example": {
        "env": "dev"
      },
      "type": "object",
      "properties": {
        "env": {
          "type": "string"
        }
      },
      "required": [
        "env"
      ]
    },
    "InputData": {
      "title": "InputData",
      "example": {
        "resultFolder": "computationResult",
        "containerVolumePath": "/data"
      },
      "type": "object",
      "properties": {
        "resultFolder": {
          "type": "string"
        },
        "containerVolumePath": {
          "type": "string"
        }
      },
      "required": [
        "resultFolder",
        "containerVolumePath"
      ]
    }
  },
  "tags": [
    {
      "name": "Simulation Switchboard API",
      "description": "This API will handle the spawning and monitoring of Docker containers for incoming simulation jobs, allowing each job to be executed in its own container."
    }
  ]
}